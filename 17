// NeuroDo Frontend (vanilla JS, demo data via localStorage)

(function(){
  const qs = (s,root=document)=>root.querySelector(s);
  const qsa = (s,root=document)=>[...root.querySelectorAll(s)];
  const on = (el,ev,fn)=>el && el.addEventListener(ev,fn);
  const money = (n)=> new Intl.NumberFormat('ru-RU',{style:'currency',currency:'RUB',maximumFractionDigits:0}).format(n||0);
  const getLocal = (k, fallback)=> { try { return JSON.parse(localStorage.getItem(k)) ?? fallback; } catch(_) { return fallback; } };
  const setLocal = (k,v)=> localStorage.setItem(k, JSON.stringify(v));
  const uid = ()=> Date.now().toString(36)+Math.random().toString(36).slice(2,7);
  const urlParams = new URLSearchParams(location.search);
  const COMMISSION = { percent: 0.12, min: 200, payoutFee: 0.02 };

  // Seed data
  const CATEGORIES = [
    "Чат‑боты и ассистенты",
    "Автоматизация и интеграции",
    "Аналитика и ML‑модели",
    "Компьютерное зрение / OCR",
    "Голос: ASR/TTS",
    "Генерация контента",
    "Рекомендательные системы",
    "Финтех / скоринг",
    "Документооборот / парсинг",
    "Обучение и консалтинг"
  ];

  function seed() {
    if(!getLocal('experts')){
      const experts = [
        {id:'e1', name:'Алексей П.', rating:4.8, city:'moscow', online:true, rate:2500, categories:["Чат‑боты и ассистенты","Автоматизация и интеграции"], skills:["Telegram","WhatsApp","GPT-4","Make/Zapier"], about:"Делаю ботов под ключ, интеграции с CRM.", reviews:17},
        {id:'e2', name:'Мария С.', rating:4.9, city:'spb', online:true, rate:3000, categories:["Компьютерное зрение / OCR"], skills:["OCR","OpenCV","Tesseract","Python"], about:"OCR документы, распознавание чеков.", reviews:21},
        {id:'e3', name:'Игорь К.', rating:4.6, city:'moscow', online:false, rate:2000, categories:["Аналитика и ML‑модели"], skills:["XGBoost","LightGBM","Airflow"], about:"Скоринг, предиктивные модели.", reviews:12},
        {id:'e4', name:'Екатерина Л.', rating:4.7, city:'spb', online:true, rate:1800, categories:["Генерация контента","Чат‑боты и ассистенты"], skills:["LLM","RAG","Prompt Design"], about:"Контент и ассистенты для маркетинга.", reviews:9},
        {id:'e5', name:'Дмитрий В.', rating:4.5, city:'moscow', online:true, rate:2200, categories:["Голос: ASR/TTS"], skills:["ASR","TTS","Kaldi","Vosk"], about:"Речь: колл‑центры, голосовые ассистенты.", reviews:8},
        {id:'e6', name:'Ольга Н.', rating:4.7, city:'spb', online:true, rate:2600, categories:["Документооборот / парсинг"], skills:["Python","Playwright","ETL"], about:"Парсинг, обработка договоров и актов.", reviews:10}
      ];
      setLocal('experts', experts);
    }
    if(!getLocal('jobs')){
      const jobs = [
        {id:'j1', title:'Телеграм‑бот FAQ для ритейла', category:CATEGORIES[0], budget:60000, days:21, location:'online', urgency:'medium', description:'Нужен бот поддержки с интеграцией в CRM.', createdAt:Date.now()-86400000*3, author:'seed', proposals:2},
        {id:'j2', title:'OCR накладных (99% точность)', category:CATEGORIES[3], budget:120000, days:30, location:'moscow', urgency:'high', description:'Поток 5к страниц/сутки, выгрузка в 1С.', createdAt:Date.now()-86400000*6, author:'seed', proposals:5},
        {id:'j3', title:'Рекомендательная система для e‑com', category:CATEGORIES[6], budget:180000, days:45, location:'online', urgency:'medium', description:'Поднять AOV и CR на сайте.', createdAt:Date.now()-86400000*10, author:'seed', proposals:1}
      ];
      setLocal('jobs', jobs);
    }
    if(!getLocal('proposals')) setLocal('proposals', []);
    if(!getLocal('posts')){
      setLocal('posts', [
        {id:'p1', title:'Как написать ТЗ на чат‑бота', excerpt:'Структура, сроки и риски', date:'2025-08-01'},
        {id:'p2', title:'OCR: что важно для точности', excerpt:'Данные, предобучение, валидация', date:'2025-07-15'},
        {id:'p3', title:'Интеграция GPT в бизнес‑процессы', excerpt:'RAG, приватность, ROI', date:'2025-06-30'}
      ]);
    }
    setLocal('categories', CATEGORIES);
  }

  function showToast(msg){
    const wrap = qs('#toast'); if(!wrap) return;
    const el = document.createElement('div'); el.className='toast'; el.textContent=msg;
    wrap.appendChild(el); setTimeout(()=>{ el.remove(); }, 3500);
  }

  function toggleMenu(){
    const btn = qs('.nav__toggle'), list = qs('.nav__list');
    on(btn,'click', ()=>{
      const open = list.classList.toggle('show');
      btn.setAttribute('aria-expanded', String(open));
    });
  }

  // Home: categories & calculator
  function initHome(){
    const grid = qs('#homeCategories');
    const cats = getLocal('categories', CATEGORIES);
    if(grid){
      grid.innerHTML = cats.map(c=>`
        <a class="category card" href="catalog-jobs.html?category=${encodeURIComponent(c)}">
          <span>${c}</span><span class="badge">→</span>
        </a>
      `).join('');
    }
    const in1 = qs('#calcAmount'), out1 = qs('#calcResult');
    if(in1 && out1){
      const upd = ()=>{
        const v = Number(in1.value||0);
        if(!v){ out1.textContent = 'Комиссия: —'; return; }
        const fee = Math.max(v*COMMISSION.percent, COMMISSION.min);
        const payout = v - fee;
        out1.textContent = `Комиссия: ${money(fee)} • К выплате исполнителю: ${money(payout)}`;
      };
      on(in1,'input',upd); upd();
    }
  }

  // Experts catalog
  function renderExperts(){
    const list = qs('#expertsList'); if(!list) return;
    const experts = getLocal('experts', []);
    const selCat = qs('#expertCategory'), ratingSel = qs('#expertRating'), citySel = qs('#expertLocation'), search = qs('#expertSearch');
    // Fill categories
    const cats = getLocal('categories', CATEGORIES);
    if(selCat && !selCat.dataset.filled){ selCat.dataset.filled='1'; selCat.innerHTML = '<option value="">Все категории</option>' + cats.map(c=>`<option>${c}</option>`).join(''); }

    function apply(){
      const q = (search?.value||'').toLowerCase().trim();
      const cat = selCat?.value||'';
      const minR = Number(ratingSel?.value||0);
      const city = citySel?.value||'';
      const filtered = experts.filter(e=>{
        const okQ = !q || [e.name, e.about, ...(e.skills||[])].join(' ').toLowerCase().includes(q);
        const okC = !cat || e.categories.includes(cat);
        const okR = !minR || e.rating >= minR;
        const okCity = !city || e.city === city || (city==='online' && e.online);
        return okQ && okC && okR && okCity;
      });
      list.innerHTML = filtered.map(e=>`
        <article class="card">
          <header style="display:flex; align-items:center; gap:12px">
            <div class="badge" aria-hidden="true">★ ${e.rating}</div>
            <h2 style="margin:0; font-size:1.1rem"><a href="expert.html?id=${e.id}">${e.name}</a></h2>
          </header>
          <p class="muted small">${e.categories.join(' • ')}</p>
          <p>${e.about}</p>
          <p class="small muted">Ставка: ~${money(e.rate)}/час • Отзывов: ${e.reviews}</p>
          <div style="display:flex; gap:6px; flex-wrap:wrap; margin-top:6px">
            ${(e.skills||[]).slice(0,6).map(s=>`<span class="badge">${s}</span>`).join('')}
          </div>
        </article>
      `).join('') || '<p class="muted">Не найдено исполнителей по заданным фильтрам.</p>';
    }
    ['input','change'].forEach(ev=>{
      on(search,ev,apply); on(selCat,ev,apply); on(ratingSel,ev,apply); on(citySel,ev,apply);
    });
    apply();

    // If query q= prefill
    const q = urlParams.get('q'); if(q && search){ search.value=q; apply(); }
  }

  // Jobs catalog
  function renderJobs(){
    const list = qs('#jobsList'); if(!list) return;
    const jobs = getLocal('jobs', []);
    const selCat = qs('#jobCategory'), urgSel = qs('#jobUrgency');
    const bMin = qs('#budgetMin'), bMax = qs('#budgetMax'), search = qs('#jobSearch');
    const cats = getLocal('categories', CATEGORIES);
    if(selCat && !selCat.dataset.filled){ selCat.dataset.filled='1'; selCat.innerHTML = '<option value="">Все категории</option>' + cats.map(c=>`<option>${c}</option>`).join(''); }
    const presetCategory = urlParams.get('category'); if(presetCategory && selCat){ selCat.value = presetCategory; }

    function apply(){
      const q = (search?.value||'').toLowerCase().trim();
      const cat = selCat?.value||'';
      const urg = urgSel?.value||'';
      const min = Number(bMin?.value||0); const max = Number(bMax?.value||0);
      const filtered = getLocal('jobs', []).filter(j=>{
        const okQ = !q || [j.title, j.description, j.category].join(' ').toLowerCase().includes(q);
        const okC = !cat || j.category === cat;
        const okU = !urg || j.urgency === urg;
        const okBmin = !min || (j.budget||0) >= min;
        const okBmax = !max || (j.budget||0) <= max;
        return okQ && okC && okU && okBmin && okBmax;
      }).sort((a,b)=>(b.createdAt||0)-(a.createdAt||0));
      list.innerHTML = filtered.map(j=>`
        <article class="card">
          <h2 style="margin:0"><a href="job.html?id=${j.id}">${j.title}</a></h2>
          <p class="muted small">${j.category} • Срочность: ${j.urgency} • Формат: ${j.location}</p>
          <p>${(j.description||'').slice(0,160)}${(j.description||'').length>160?'…':''}</p>
          <div style="display:flex; gap:12px; align-items:center; justify-content:space-between">
            <span class="badge">${money(j.budget)}</span>
            <span class="muted small">${new Date(j.createdAt||Date.now()).toLocaleDateString('ru-RU')}</span>
          </div>
        </article>
      `).join('') || '<p class="muted">Задачи не найдены.</p>';
    }
    ['input','change'].forEach(ev=>{
      on(search,ev,apply); on(selCat,ev,apply); on(urgSel,ev,apply); on(bMin,ev,apply); on(bMax,ev,apply);
    });
    apply();
  }

  // Job detail + apply + chat
  function renderJobDetail(){
    const wrap = qs('#jobDetail'); if(!wrap) return;
    const id = urlParams.get('id');
    const jobs = getLocal('jobs', []);
    const job = jobs.find(j=>j.id===id) || jobs[0];
    if(!job){ wrap.innerHTML = '<p class="muted">Задача не найдена.</p>'; return; }
    wrap.innerHTML = `
      <header>
        <h1 style="margin:0 0 6px">${job.title}</h1>
        <p class="muted small">${job.category} • Срочность: ${job.urgency} • Формат: ${job.location}</p>
      </header>
      <p>${job.description}</p>
      <p><span class="badge">Бюджет: ${money(job.budget)}</span> <span class="badge">Срок: ${job.days} дн.</span></p>
    `;

    // Reply form
    const form = qs('#replyForm');
    on(form,'submit', (e)=>{
      e.preventDefault();
      const fd = new FormData(form);
      const price = Number(fd.get('price')); const days = Number(fd.get('days')); const message = (fd.get('message')||'').toString();
      if(!price || !days){ showToast('Заполните цену и срок'); return; }
      const proposals = getLocal('proposals', []);
      proposals.push({ id: uid(), jobId: job.id, price, days, message, createdAt: Date.now(), me:true });
      setLocal('proposals', proposals);
      // Update job proposals count (optional)
      setLocal('jobs', getLocal('jobs', []).map(j=> j.id===job.id ? {...j, proposals:(j.proposals||0)+1 } : j));
      form.reset();
      showToast('Отклик отправлен (демо)');
    });

    // Chat demo
    const chatBox = qs('#chat'); const chatForm = qs('#chatForm'); const input = qs('#chatInput');
    const chatKey = `chat:${job.id}`;
    const msgs = getLocal(chatKey, []);
    const renderChat = ()=>{
      chatBox.innerHTML = msgs.map(m=>`<div class="chat__msg ${m.me?'me':''}" role="status" aria-live="polite">${m.text} <span class="small muted">— ${new Date(m.ts).toLocaleTimeString('ru-RU').slice(0,5)}</span></div>`).join('');
      chatBox.scrollTop = chatBox.scrollHeight;
    };
    renderChat();
    on(chatForm,'submit',(e)=>{
      e.preventDefault();
      const text = input.value.trim(); if(!text) return;
      msgs.push({ text, me:true, ts: Date.now() });
      setLocal(chatKey, msgs);
      input.value=''; renderChat();
    });
  }

  // Create job
  function initCreateJob(){
    const form = qs('#createJobForm'); if(!form) return;
    // Categories
    const catSel = qs('#createCategory');
    const cats = getLocal('categories', CATEGORIES);
    catSel.innerHTML = cats.map(c=>`<option>${c}</option>`).join('');
    on(form,'submit',(e)=>{
      e.preventDefault();
      const fd = new FormData(form);
      const job = {
        id: uid(),
        title: fd.get('title'),
        category: fd.get('category'),
        budget: Number(fd.get('budget')||0),
        days: Number(fd.get('days')||0),
        location: fd.get('location'),
        urgency: fd.get('urgency'),
        description: fd.get('description'),
        createdAt: Date.now(),
        author: 'me',
        proposals: 0
      };
      const jobs = getLocal('jobs', []);
      jobs.unshift(job);
      setLocal('jobs', jobs);
      showToast('Задача опубликована!');
      setTimeout(()=> location.href = `job.html?id=${job.id}`, 500);
    });
  }

  // Expert profile
  function renderExpertProfile(){
    const box = qs('#expertProfile'); if(!box) return;
    const id = urlParams.get('id');
    const experts = getLocal('experts', []);
    const e = experts.find(x=>x.id===id) || experts[0];
    if(!e){ box.innerHTML = '<p class="muted">Исполнитель не найден.</p>'; return; }
    box.innerHTML = `
      <header style="display:flex; align-items:center; justify-content:space-between;">
        <div>
          <h1 style="margin:.2em 0">${e.name}</h1>
          <p class="muted small">★ ${e.rating} • ${e.categories.join(' • ')}</p>
        </div>
        <div class="badge">~${money(e.rate)}/час</div>
      </header>
      <p>${e.about}</p>
      <div style="display:flex; gap:6px; flex-wrap:wrap">${(e.skills||[]).map(s=>`<span class="badge">${s}</span>`).join('')}</div>
      <hr>
      <h3>Портфолио (демо)</h3>
      <ul class="muted"><li>Бот FAQ для ритейла</li><li>OCR накладных</li></ul>
      <div class="form__actions">
        <a class="btn btn--secondary" href="job.html?id=j1">Предложить на задачу</a>
      </div>
    `;
  }

  // Dashboard
  function renderDashboard(){
    const myJobs = qs('#myJobs'), myProps = qs('#myProposals');
    if(!myJobs && !myProps) return;
    const jobs = getLocal('jobs', []).filter(j=>j.author==='me');
    myJobs.innerHTML = jobs.map(j=>`
      <div class="card">
        <h3 style="margin:.2em 0"><a href="job.html?id=${j.id}">${j.title}</a></h3>
        <p class="muted small">${j.category} • Бюджет: ${money(j.budget)} • Откликов: ${j.proposals||0}</p>
      </div>
    `).join('') || '<p class="muted">Пока нет ваших задач.</p>';

    const props = getLocal('proposals', []).filter(p=>p.me);
    myProps.innerHTML = props.map(p=>`
      <div class="card">
        <p>Отклик на <a href="job.html?id=${p.jobId}">${p.jobId}</a>: ${money(p.price)} • ${p.days} дн.</p>
        <p class="muted small">${new Date(p.createdAt).toLocaleString('ru-RU')}</p>
      </div>
    `).join('') || '<p class="muted">Ещё нет откликов.</p>';
  }

  // Escrow calculator page
  function initFeesCalc(){
    const input = qs('#feesAmount'), out = qs('#feesResult');
    if(!input || !out) return;
    const upd = ()=>{
      const v = Number(input.value||0);
      if(!v){ out.textContent = 'Комиссия: —'; return; }
      const fee = Math.max(v*COMMISSION.percent, COMMISSION.min);
      const payout = v - fee;
      out.textContent = `Комиссия: ${money(fee)} • К выплате: ${money(payout)}`;
    };
    on(input,'input',upd); upd();
  }

  // Auth tabs + demo storage
  function initAuth(){
    const tabs = qsa('.tab'); if(!tabs.length) return;
    tabs.forEach(btn=>{
      on(btn,'click', ()=>{
        tabs.forEach(b=>b.classList.remove('is-active'));
        btn.classList.add('is-active');
        const id = btn.dataset.tab;
        qsa('.tab__panel').forEach(p=>{
          p.hidden = p.id !== id;
          p.classList.toggle('is-active', p.id===id);
        });
      });
    });
    const reg = qs('#registerForm'), log = qs('#loginForm');
    on(reg,'submit', (e)=>{
      e.preventDefault();
      const fd = new FormData(reg);
      const user = { id: uid(), name: fd.get('name'), email: fd.get('email'), role: fd.get('role') };
      const users = getLocal('users', []); users.push(user); setLocal('users', users);
      setLocal('currentUser', user);
      showToast('Регистрация успешна!');
      setTimeout(()=> location.href='dashboard.html', 500);
    });
    on(log,'submit', (e)=>{
      e.preventDefault();
      const fd = new FormData(log);
      const email = fd.get('email'); // Пароли в демо не проверяем
      const user = (getLocal('users', []).find(u=>u.email===email)) || { id: 'guest', name:'Гость', email, role:'client' };
      setLocal('currentUser', user);
      showToast('Вход выполнен!');
      setTimeout(()=> location.href='dashboard.html', 500);
    });
  }

  // Blog demo
  function renderBlog(){
    const list = qs('#blogList'); if(!list) return;
    const posts = (getLocal('posts', [])||[]).sort((a,b)=> new Date(b.date)-new Date(a.date));
    list.innerHTML = posts.map(p=>`
      <article class="card">
        <h2 style="margin:.2em 0">${p.title}</h2>
        <p class="muted small">${new Date(p.date).toLocaleDateString('ru-RU')}</p>
        <p>${p.excerpt}</p>
      </article>
    `).join('');
  }

  // Init
  seed();
  toggleMenu();
  initHome();
  renderExperts();
  renderJobs();
  renderJobDetail();
  initCreateJob();
  renderExpertProfile();
  renderDashboard();
  initFeesCalc();
  initAuth();
})();
